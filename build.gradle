buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'nebula.contacts' version '3.0.1'
    id 'nebula.facet' version '3.3.0'
    id 'nebula.lint' version '7.4.0'
    id 'org.sonarqube' version '2.5'
}

ext {
    javaVersion = '1.8'
    snippetsDir = file('build/generated-snippets')
}

group 'org.manuel.teambuilting'
version '0.1.0'

apply plugin: 'build-announcements'
apply plugin: 'build-dashboard'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'

pmd {
    ignoreFailures = true
}

findbugs {
    ignoreFailures = true
    effort = 'max'
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jdepend {
    ignoreFailures = false
}

tasks.withType(JDepend) {
    reports {
        text.enabled = false
        xml.enabled = true
    }
}

gradleLint {
    alwaysRun = false
    criticalRules += 'archaic-wrapper'
    criticalRules += 'unused-dependency'
    rules += 'duplicate-dependency-class'
    rules += 'unused-exclude-by-dep'
}

junitPlatform {
    platformVersion '1.0.0-M4'
    // enableStandardTestTask true
    // reportsDir "build/test-results/junit-platform" // this is the default
    // logManager 'org.apache.logging.log4j.jul.LogManager'
}

contacts {
    'manuel.doncel.martos@gmail.com' {
        roles 'developer'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

facets {
    integrationTest {
        parentSourceSet = 'main'
        testTaskName = 'integrationTest'
        includeInCheckLifecycle = false
    }
}

bootRepackage {
    enabled = false
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "$projectDir/repo" }
}

dependencies {
    compile "org.springframework.amqp:spring-rabbit"
    compile "org.springframework.boot:spring-boot-starter-amqp"
    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.data:spring-data-jpa:1.11.4.RELEASE'
    compileOnly 'org.springframework:spring-beans:4.3.7.RELEASE'
    compileOnly 'org.springframework:spring-core:4.3.7.RELEASE'
    compileOnly 'org.springframework:spring-web:4.3.7.RELEASE'
    compileOnly 'org.springframework:spring-webmvc:4.3.7.RELEASE'
    gradleLint.ignore('unused-dependency') {
        compileOnly 'org.projectlombok:lombok'
    }
    compile 'javax.inject:javax.inject:1'
    compile 'javax.validation:validation-api:1.0.0.GA'

    compile 'org.manuel.teambuilting:teambuilting-exceptions:0.1.0'

    compile 'com.auth0:auth0-spring-security-mvc:1.2.3'
    compile 'com.auth0:auth0-spring-security-api:1.0.0-rc.2'

    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M4'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-core'

    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0-M4'

    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task javadocsJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocsJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven { url System.getenv( 'TEAMBUILTING_PLAYERS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_TEAMS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_SPORTS' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_MATCHES' ) + '/repo' }
        maven { url System.getenv( 'TEAMBUILTING_EXPERIENCE' ) + '/repo' }
    }
}